"use client";
import React from "react";
import ReactMarkdown from "react-markdown";
import { toast } from "react-toastify";
import { useFormStore } from "../store/useUserStore";
import { validateVulnerabilityForm } from "../helpers/general.helper";
import remarkGfm from "remark-gfm";

export default function VulnerabilityForm() {
  const [errors, setErrors] = React.useState({
    title: "",
    type: "",
    severity: "",
    description: "",
  });

  const { title, type, severity, affected, description, updateField, reset } =
    useFormStore();

  const handleChange = (
    e: React.ChangeEvent<
      HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement
    >
  ) => {
    updateField(e.target.name as any, e.target.value);
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();

    const validationErrors = validateVulnerabilityForm({
      title,
      type,
      severity,
      description,
    });

    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      toast.error("Please fix the validation errors.");
      return;
    }

    toast.success("Report submitted successfully (stored locally).");
    console.log({ title, type, severity, affected, description });
    reset();
    setErrors({ title: "", type: "", severity: "", description: "" });
  };

  return (
    <form
      onSubmit={handleSubmit}
      className="max-w-4xl mx-auto p-6 bg-gray-900 text-white rounded-lg shadow space-y-5"
    >
      <h2 className="text-2xl font-semibold">üõ°Ô∏è Vulnerability Report Form</h2>

      <div className="relative z-0 w-full group">
        <input
          type="text"
          id="title"
          name="title"
          value={title}
          onChange={handleChange}
          className="block py-2.5 px-0 w-full text-sm bg-transparent border-0 border-b-2 border-gray-600 appearance-none text-white focus:outline-none focus:ring-0 focus:border-blue-500 peer"
          placeholder=" "
        />
        <label
          htmlFor="title"
          className="absolute text-sm text-gray-400 duration-300 transform -translate-y-6 scale-95 top-3 origin-[0] left-0 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-2.5 peer-focus:scale-95 peer-focus:-translate-y-6"
        >
          Title
        </label>
        {errors.title && (
          <p className="text-red-500 text-sm mt-1">{errors.title}</p>
        )}
      </div>

      <div>
        <label htmlFor="type" className="block font-medium mb-1">
          Vulnerability Type
        </label>
        <select
          id="type"
          name="type"
          value={type}
          onChange={handleChange}
          className="w-full p-2 rounded bg-gray-800 border border-gray-700"
        >
          <option value="">Select a type</option>
          <option value="XSS">XSS</option>
          <option value="SQLi">SQL Injection</option>
          <option value="RCE">Remote Code Execution</option>
        </select>
        {errors.type && (
          <p className="text-red-500 text-sm mt-1">{errors.type}</p>
        )}
      </div>

      <div>
        <label className="block font-medium mb-1">Severity</label>
        <div className="flex flex-wrap gap-4">
          {["Low", "Medium", "High", "Critical"].map((level) => (
            <label
              key={level}
              className="flex items-center gap-2 cursor-pointer"
            >
              <input
                type="radio"
                name="severity"
                value={level}
                checked={severity === level}
                onChange={handleChange}
              />
              <span>{level}</span>
            </label>
          ))}
        </div>
        {errors.severity && (
          <p className="text-red-500 text-sm mt-1">{errors.severity}</p>
        )}
      </div>

      <div>
        <label htmlFor="affected" className="block font-medium mb-1">
          Affected Components
        </label>
        <input
          id="affected"
          name="affected"
          value={affected}
          onChange={handleChange}
          className="w-full p-2 rounded bg-gray-800 border border-gray-700"
        />
      </div>

      <div>
        <label htmlFor="description" className="block font-medium mb-1">
          Description (Markdown Supported)
        </label>
        <textarea
          id="description"
          name="description"
          value={description}
          onChange={handleChange}
          className="w-full p-2 rounded bg-gray-800 border border-gray-700"
          rows={6}
        />
        {errors.description && (
          <p className="text-red-500 text-sm mt-1">{errors.description}</p>
        )}
      </div>

      <div>
        <label className="block font-medium mb-1 text-lg">Live Preview</label>
        <div className="bg-gray-800 border border-gray-700 p-4 rounded min-h-[150px] prose prose-invert">
          <ReactMarkdown remarkPlugins={[remarkGfm]}>
            {description || "*Nothing yet.*"}
          </ReactMarkdown>
        </div>
      </div>

      <div className="flex items-center gap-4">
        <button
          type="submit"
          className="bg-blue-600 cursor-pointer hover:bg-blue-700 transition px-4 py-2 rounded font-medium"
        >
          Submit
        </button>
        <button
          type="button"
          onClick={() => {
            reset();
            setErrors({ title: "", type: "", severity: "", description: "" });
          }}
          className="bg-gray-600 cursor-pointer hover:bg-gray-700 transition px-4 py-2 rounded font-medium"
        >
          Clear
        </button>
      </div>
    </form>
  );
}
